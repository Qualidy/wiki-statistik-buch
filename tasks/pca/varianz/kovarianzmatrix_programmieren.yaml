title: Geschlossene Form der Kovarianzmatrix programmieren
question: |
  Implementiere das Berechnen der Kovarianzmatrix unter Verwendung der geschlossenen Form.
  Der Funktionsname lautet `cov`.
solution: |
  ```python
  # ----Johannes----
  def covariance_matrix(X):
      X = X.T # um später nicht verwirrt zu sein wie man das drehen und wenden muss
      n = X.shape[1] # um die länge zu bekommen 
      # 10
      mean_X = np.mean(X, axis=1, keepdims=True) # durchschnitt über alle reihen 
      # [[3.] 
      # [6.]
      # [5.]]
      X_centered = X - mean_X
      # [[-1.  1. -1.  4. -2. -2. -1. -2.  1.  3.]
      # [ 1.  2.  0.  0. -1. -2.  0.  2.  0. -2.]
      # [-3.  1. -4. -2.  4.  1.  3. -2.  2.  0.]]
      return (X_centered @ X_centered.T) / n
  
  if __name__ == "__main__":
      X = np.array([[2, 7, 2],
          [4, 8, 6],
          [2, 6, 1],
          [7, 6, 3],
          [1, 5, 9],
          [1, 4, 6],
          [2, 6, 8],
          [1, 8, 3],
          [4, 6, 7],
          [6, 4, 5]])
      
      print(f"{covariance_matrix(X)}")
      
  #-----Daniel---
  def mittel(X: np.matrix):
      if not isinstance(X, np.matrix):
          raise TypeError("Input must be a numpy matrix.")
      if X.shape[0] == 0 or X.shape[1] == 0:
          raise ValueError("Matrix dimensions must be greater than 0.")
      return [np.mean(x) for x in X]
    
    
  def cov_geschlossen(X: np.matrix):
      n = X.shape[1]
      m = np.matrix(mittel(X)).T
      return (1 / n) * (X - m) @ (X - m).T
  ```