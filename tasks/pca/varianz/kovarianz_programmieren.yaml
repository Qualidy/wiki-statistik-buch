title: Kovarianzmatrix programmieren
question: |
  Implementiere Sie das Berechnen Kovarianz auf verschiedene Arten,
  die hier in Definitionen und Ãœbungen vorgestellt wurden.
  
solution: |
  ```python
  ###HDaniel###
  import numpy as np
  
  def mittel(X: np.matrix):
      if not isinstance(X, np.matrix):
          raise TypeError("Input must be a numpy matrix.")
      if X.shape[0] == 0 or X.shape[1] == 0:
          raise ValueError("Matrix dimensions must be greater than 0.")
      return [np.mean(x) for x in X]
  
  def cov(X: np.matrix):
      if not isinstance(X, np.matrix):
          raise TypeError("Input must be a numpy matrix.")
      if X.shape[0] == 0 or X.shape[1] == 0:
          raise ValueError("Matrix dimensions must be greater than 0.")
      m = mittel(X)
      n = X.shape[1]
      return np.matrix([[(1 / n) * sum((X[i, k] - m[i]) * (X[j, k] - m[j]) for k in range(n)) for j in range(X.shape[0])] for i in range(X.shape[0])])
  
  X = np.matrix([[2,7,2],[4,8,6],[2,6,1],[7,6,3],[1,5,9],[1,4,6],[2,6,8],[1,8,3],[4,6,7],[6,4,5]]).T
  print("Mittel:", mittel(X))
  print("Covariance Matrix:\n", cov(X))
  
  # Unit tests
  import unittest
  from parameterized import parameterized
  
  class TestMatrixFunctions(unittest.TestCase):
  
      @parameterized.expand([
          (np.matrix([[2,7,2],[4,8,6],[2,6,1],[7,6,3],[1,5,9],[1,4,6],[2,6,8],[1,8,3],[4,6,7],[6,4,5]]).T, [3.0, 6.0, 5.0]),
          (np.matrix([[1,2,3],[4,5,6],[7,8,9]]).T, [4.0, 5.0, 6.0])
      ])
      def test_mittel(self, X, expected):
          result = mittel(X)
          self.assertEqual(result, expected)
  
      @parameterized.expand([
          (np.matrix([[2,7,2],[4,8,6],[2,6,1],[7,6,3],[1,5,9],[1,4,6],[2,6,8],[1,8,3],[4,6,7],[6,4,5]]).T, 
           np.matrix([[ 4.2, -0.3, -0.7], [-0.3,  1.8, -1.1], [-0.7, -1.1,  6.4]])),
          (np.matrix([[1,2,3],[4,5,6],[7,8,9]]).T, 
           np.matrix([[6.0, 6.0, 6.0], [6.0, 6.0, 6.0], [6.0, 6.0, 6.0]]))
      ])
      def test_cov(self, X, expected):
          result = cov(X)
          np.testing.assert_array_almost_equal(result, expected)
  
      @parameterized.expand([
          ("not a matrix", TypeError),
          (np.matrix([]), ValueError)
      ])
      def test_mittel_errors(self, X, expected_exception):
          with self.assertRaises(expected_exception):
              mittel(X)
  
      @parameterized.expand([
          ("not a matrix", TypeError),
          (np.matrix([]), ValueError)
      ])
      def test_cov_errors(self, X, expected_exception):
          with self.assertRaises(expected_exception):
              cov(X)
  
  if __name__ == '__main__':
      unittest.main()
  
  
  #### Henrik
  
  
  def mean(m):
      mean_values = np.mean(m, axis=0)
      return mean_values
  
  def covarianz(m, means):
      distance = np.array([[col - means[i] for i, col in enumerate(row)] for row in m])
      n = distance.shape[0]
      cov_matrix = 1/n * distance.T @ distance
      return cov_matrix
  
  
  
  ### Ly
  
  def calc_covariance(x, y):
      x_mean = np.mean(x)
      y_mean = np.mean(y)
  
      cov = np.mean((x-x_mean)*(y-y_mean))
      return cov
  
  def calc_covariance_matrix(X: np.array):
      _, n_features = X.shape
      cov_matrix = np.zeros((n_features, n_features))
      for i in range(n_features):
          for j in range(n_features):
              cov_matrix[i, j] = calc_covariance(X[:, i], X[:, j])
      return cov_matrix
  
  
  
  ############## Noah
  def covariance(arr1, arr2):
      arr1_mean = sum(arr1)/len(arr1)
      arr2_mean = sum(arr2)/len(arr2)
      
      return 1/len(arr1) * (sum((arr1_i - arr1_mean)*(arr2_i - arr2_mean) for arr1_i, arr2_i in zip(arr1, arr2)))
    
  def covariance_matrix(*arrays):
      num_arrays = len(arrays)
      cov_matrix = np.zeros((num_arrays, num_arrays))
      for i in range(num_arrays):
          for j in range(num_arrays):
              cov_value = covariance(arrays[i], arrays[j])
              cov_matrix[i][j] = cov_value
      
      return cov_matrix
  
  
  
  
  ------Johannes------
  import numpy as np
  
  X = np.array([[2, 7, 2],
                [4, 8, 6],
                [2, 6, 1],
                [7, 6, 3],
                [1, 5, 9],
                [1, 4, 6],
                [2, 6, 8],
                [1, 8, 3],
                [4, 6, 7],
                [6, 4, 5]])
  
  
  print(f"{X.T[0].mean()}")
  print(f"{X.T[1].mean()}")
  print(f"{X.T[2].mean()}")
  np.cov(X.T, bias=True)
  
  
  
  #Nick
  
  def cov(x, y):
      if not x or not y:
          raise ValueError('Bitte zwei Vektoren Ã¼bergeben')
      
      vector_x = np.array(x)
      vector_y = np.array(y)
      x_ = sum(vector_x)/len(vector_x)
      y_ = sum(vector_y)/len(vector_y)
      
      return sum((number_1 - x_)*(number_2 - y_) for number_1, number_2 in zip(vector_x, vector_y))/len(vector_x)
    
  class Test_Cov(unittest.TestCase):
    x_1 = [2, 4, 2, 7, 1, 1, 2, 1, 4, 6]
      x_2 = [7, 8, 6, 6, 5, 4, 6, 8, 6, 4]
      x_3 = [2, 6, 1, 3, 9, 6, 8, 3, 7, 5]
      def test_empty(self):
          with self.assertRaises(ValueError):
              cov([],[])
          
  
  
      @parameterized.expand([
            
          (x_1,x_2, -0.3),         
          (x_2, x_1,-0.3), 
          (x_3,x_3, 6.4),
               
      ])
      def test_parametrized(self, vector_1,vector_2, expected):
          self.assertAlmostEqual(cov(vector_1,vector_2), expected, places=2)
              
  if __name__ == "__main__":
          
          unittest.main(argv=[''], verbosity=2, exit=False)  
        
        
  --------------
  Kevin
  
  X = np.array([[2, 7, 2],
                [4, 8, 6],
                [2, 6, 1],
                [7, 6, 3],
                [1, 5, 9],
                [1, 4, 6],
                [2, 6, 8],
                [1, 8, 3],
                [4, 6, 7],
                [6, 4, 5]])
  
  x1 = X[:,0]
  x2 = X[:,1]
  x3 = X[:,2]
  
  def covariance(x, y):
      mean_x = np.mean(x)
      mean_y = np.mean(y)
  
      return np.sum((x - mean_x) * (y - mean_y)) / (len(x))
  
  
  def covariance_matrix(X):
      spalten = X.shape[1]
      cov_matrix = np.zeros((spalten, spalten))
  
      for x in range(spalten):
          for y in range(spalten):
              cov_matrix[x, y] = covariance(X[:, x], X[:, y])
  
      return cov_matrix
    
      
  -------- Tom
  import numpy as np
  
  X = np.array([
      [2,7,2],
      [4,8,6],
      [2,6,1],
      [7,6,3],
      [1,5,9],
      [1,4,6],
      [2,6,8],
      [1,8,3],
      [4,6,7],
      [6,4,5]
  ])
  
  np.cov(X,rowvar=False, bias=True)
  ðŸ¦«
  
  
  
  ### Marina
  
  
  def covariance(X):
      X = np.array(X)
  
      # print(X.shape)
      n = X.shape[0]
      
      cov_matrix = np.zeros((X.shape[1], X.shape[1]))
      # print(cov_matrix)
  
      for i in range(X.shape[1]):
          for j in range(X.shape[1]):
              sum_diff = np.sum((X[:, i] - np.mean(X[:, i])) * (X[:, j] - np.mean(X[:, j])))
              cov_matrix[i, j] = sum_diff / n
      
      return cov_matrix
  
  # Beispielmatrix
  X = np.array([
      [2, 7, 2],
      [4, 8, 6],
      [2, 6, 1],
      [7, 6, 3],
      [1, 5, 9],
      [1, 4, 6],
      [2, 6, 8],
      [1, 8, 3],
      [4, 6, 7],
      [6, 4, 5]
  ])
  
  cov_matrix = covariance(X)
  print(cov_matrix)
  

  ```